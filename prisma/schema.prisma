// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  email     String @unique @db.VarChar(100)
  password  String @db.VarChar(100)
  full_name String @db.VarChar(100)
  token     Token?
  role      Role?  @relation(fields: [role_id], references: [id])
  role_id   Int?
  avatar    File?

  tasks         Task[]
  notifications Notification[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt

  @@map("users")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(100)
  slug        String           @unique @db.VarChar(100)
  users       User[]
  permissions RolePermission[]
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt

  @@map("roles")
}

model Permission {
  id         Int              @id @default(autoincrement())
  name       String           @db.VarChar(100)
  slug       String           @unique @db.VarChar(100)
  roles      RolePermission[]
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@map("permissions")
}

enum PermissionType {
  viewed
  editable
}

model RolePermission {
  id            Int            @id @default(autoincrement())
  type          PermissionType
  role          Role?          @relation(fields: [role_id], references: [id])
  role_id       Int?
  permission    Permission?    @relation(fields: [permission_id], references: [id])
  permission_id Int?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt

  @@map("role_permissions")
}

model Token {
  id            Int      @id @default(autoincrement())
  refresh_token String   @unique
  user          User     @relation(fields: [user_id], references: [id])
  user_id       Int      @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("tokens")
}

model File {
  id         Int      @id @default(autoincrement())
  file_name  String   @db.VarChar(100)
  size       Decimal
  type       String   @db.VarChar(45)
  url        String
  user       User?    @relation(fields: [user_id], references: [id])
  user_id    Int?     @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("files")
}

model TaskType {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  slug       String   @db.VarChar(100)
  tasks      Task[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("task_types")
}

model TaskStatus {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  slug       String   @unique @db.VarChar(100)
  tasks      Task[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("task_statuses")
}

model Task {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(100)
  description   String         @db.VarChar(255)
  color         String         @db.VarChar(45)
  start_date    DateTime
  end_date      DateTime
  is_completed  Boolean        @default(false)
  type          TaskType       @relation(fields: [type_id], references: [id])
  type_id       Int
  status        TaskStatus?    @relation(fields: [status_id], references: [id])
  status_id     Int?
  author        User?          @relation(fields: [author_id], references: [id])
  author_id     Int?
  notifications Notification[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt

  @@map("tasks")
}

model Notification {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  data       Json
  user       User?    @relation(fields: [user_id], references: [id])
  user_id    Int?
  task       Task?    @relation(fields: [task_id], references: [id])
  task_id    Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("notifications")
}
